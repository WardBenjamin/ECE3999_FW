#pragma once
#include "main.h"
#include "gpio.h"
#include "tim.h"
#include "adc.h"
#include "spi.h"
#include "i2c.h"
#include "gpio_util.hpp"

/*
 * Puts all the #defines generated by cubemx in a nice namespace-y format
 */

using namespace GPIO;

namespace map {
  namespace pwm_in {
    namespace channel_1 {
      const pindef pin{PWM_IN_CH1_GPIO_Port, PWM_IN_CH1_Pin};
      constexpr auto timer = &htim4;
    }

    namespace channel_2 {
      const pindef pin{PWM_IN_CH2_GPIO_Port, PWM_IN_CH2_Pin};
      constexpr auto timer = &htim15;
    }

    namespace servo {
      const pindef pin{SERVO_PWM_IN_GPIO_Port, SERVO_PWM_IN_Pin};
      constexpr auto timer = &htim17;
      constexpr auto channel = TIM_CHANNEL_1;
    }
  }

  namespace current_sense {
    namespace vbus {
      const pindef pin{VBUS_CURRENT_GPIO_Port, VBUS_CURRENT_Pin};
      constexpr auto adc = &hadc2;
      constexpr auto channel = ADC_CHANNEL_8;
    }

    namespace brake {
      const pindef pin{BRAKE_CURRENT_GPIO_Port, BRAKE_CURRENT_Pin};
      constexpr auto adc = &hadc2;
      constexpr auto channel = ADC_CHANNEL_9;
    }

    namespace phase_A {
      const pindef pin{PHASE_CURRENT_A_GPIO_Port, PHASE_CURRENT_A_Pin};
      constexpr auto adc = &hadc1;
      constexpr auto channel = ADC_CHANNEL_1;
    }

    namespace phase_B {
      const pindef pin{PHASE_CURRENT_B_GPIO_Port, PHASE_CURRENT_B_Pin};
      constexpr auto adc = &hadc1;
      constexpr auto channel = ADC_CHANNEL_3;
    }

    namespace phase_C {
      const pindef pin{PHASE_CURRENT_C_GPIO_Port, PHASE_CURRENT_C_Pin};
      constexpr auto adc = &hadc1;
      constexpr auto channel = ADC_CHANNEL_4;
    }

  }

  namespace SPI {
    namespace POWER {
      const pindef SCK{POWERSPI_SCK_GPIO_Port, POWERSPI_SCK_Pin};
      const pindef MOSI{POWERSPI_MOSI_GPIO_Port, POWERSPI_MOSI_Pin};
      const pindef MISO{POWERSPI_MISO_GPIO_Port, POWERSPI_MISO_Pin};
      constexpr auto SPI = &hspi1;

      namespace ADC {
        const pindef CS{ADC_CS_GPIO_Port, ADC_CS_Pin};
      }

      namespace inverter {
        const pindef CS{INVERTER_CS_GPIO_Port, INVERTER_CS_Pin};
      }

      namespace brake {
        const pindef CS{HALFH_CS_GPIO_Port, HALFH_CS_Pin};
      }
    }

    namespace PERIPHERAL {
      const pindef SCK{PERIPH_SPI_SCK_GPIO_Port, PERIPH_SPI_SCK_Pin};
      const pindef MOSI{PERIPH_SPI_MOSI_GPIO_Port, PERIPH_SPI_MOSI_Pin};
      const pindef MISO{PERIPH_SPI_MISO_GPIO_Port, PERIPH_SPI_MISO_Pin};
      constexpr auto SPI = &hspi3;

      namespace SD {
        const pindef CS{SD_CS_GPIO_Port, SD_CS_Pin};
      }
    }

    namespace ENCODER {
      const pindef SCK{ENCODERSPI_SCK_GPIO_Port, ENCODERSPI_SCK_Pin};
      const pindef MOSI{ENCODERSPI_MOSI_GPIO_Port, ENCODERSPI_MOSI_Pin};
      const pindef MISO{ENCODERSPI_MISO_GPIO_Port, ENCODERSPI_MISO_Pin};
      constexpr auto SPI = &hspi2;
    }

  }

  namespace PWM {
    namespace inverter {
      constexpr auto timer = &htim1;
      namespace phase_A {
        constexpr auto channel = TIM_CHANNEL_1;
        const pindef H{PHASE_A_H_GPIO_Port, PHASE_A_H_Pin};
        //const pindef L{PHASE_A_L_GPIO_Port, PHASE_A_L_Pin};
      }
      namespace phase_B {
        constexpr auto channel = TIM_CHANNEL_2;
        const pindef H{PHASE_B_H_GPIO_Port, PHASE_B_H_Pin};
        //const pindef L{PHASE_B_L_GPIO_Port, PHASE_B_L_Pin};
      }
      namespace phase_C {
        constexpr auto channel = TIM_CHANNEL_3;
        const pindef H{PHASE_C_H_GPIO_Port, PHASE_C_H_Pin};
        //const pindef L{PHASE_C_L_GPIO_Port, PHASE_C_L_Pin};
      }
    }
    namespace brake {
      constexpr auto timer = &htim8;
      constexpr auto channel = TIM_CHANNEL_3;
      const pindef H{PHASE_A_H_GPIO_Port, PHASE_A_H_Pin};
      //const pindef L{PHASE_A_L_GPIO_Port, PHASE_A_L_Pin};
    }

  }

  namespace analog_in {
    namespace vbus_voltage {
      const pindef pin{VBUS_VOLTAGE_GPIO_Port, VBUS_VOLTAGE_Pin};
      constexpr auto adc = &hadc4;
      constexpr auto channel = ADC_CHANNEL_1;
    }

    namespace brake_oos {
      const pindef pin{HALFH_OOS_GPIO_Port, HALFH_OOS_Pin};
      constexpr auto adc = &hadc4;
      constexpr auto channel = ADC_CHANNEL_2;
    }

    namespace ref_3v3 {
      const pindef pin{PWR_REF_3V3_GPIO_Port, PWR_REF_3V3_Pin};
      constexpr auto adc = &hadc4;
      constexpr auto channel = ADC_CHANNEL_10;
    }

    namespace motor_thermistor {
      const pindef pin{MOTOR_THERMISTOR_GPIO_Port, MOTOR_THERMISTOR_Pin};
      constexpr auto adc = &hadc4;
      constexpr auto channel = ADC_CHANNEL_11;
    }
  }

  namespace GPIO {
    namespace inverter {
      const pindef enable = {INVERTER_ENABLE_GPIO_Port, INVERTER_ENABLE_Pin};
      const pindef fault = {INVERTER_FAULT_GPIO_Port, INVERTER_FAULT_Pin};
    }
    namespace brake {
      const pindef enable = {HALFH_ENABLE_GPIO_Port, HALFH_ENABLE_Pin};
      const pindef reset = {HALFH_RESET_GPIO_Port, HALFH_RESET_Pin};
      const pindef diag = {HALFH_DIAG_GPIO_Port, HALFH_DIAG_Pin};
    }

    namespace SD {
      const pindef sense = {SD_SENSE_GPIO_Port, SD_SENSE_Pin};
    }
  }

  namespace encoder {
    constexpr auto timer = &htim3;
    const pindef A = {MOTOR_ENCODER_A_GPIO_Port, MOTOR_ENCODER_A_Pin};
    const pindef B = {MOTOR_ENCODER_B_GPIO_Port, MOTOR_ENCODER_B_Pin};
  }

  namespace hall {
    constexpr auto timer = &htim2;
    const pindef A = {HALL_A_GPIO_Port, HALL_A_Pin};
    const pindef B = {HALL_B_GPIO_Port, HALL_B_Pin};
    const pindef C = {HALL_C_GPIO_Port, HALL_C_Pin};
  }

  namespace I2C {
    namespace control {
      const pindef SCL = {CNTLI2C_SCL_GPIO_Port, CNTLI2C_SCL_Pin};
      const pindef SDA = {CNTLI2C_SDA_GPIO_Port, CNTLI2C_SDA_Pin};
      constexpr auto I2C = &hi2c1;
    }

    namespace leds {
      const pindef SCL = {LEDCONTROLLER_SCL_GPIO_Port, LEDCONTROLLER_SCL_Pin};
      const pindef SDA = {LEDCONTROLLER_SDA_GPIO_Port, LEDCONTROLLER_SDA_Pin};
      constexpr auto I2C = &hi2c3;
    }
  }

  namespace statusLED {
    const pindef pin = {STATUS_LED_GPIO_Port, STATUS_LED_Pin};
    constexpr auto timer = &htim16;
    constexpr auto channel = TIM_CHANNEL_1;
  }

}